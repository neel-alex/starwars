if (false) {

msg_num = game.messages._source.length - 1
while (!game.messages._source[msg_num].hasOwnProperty("roll")){
    msg_num = msg_num - 1

}

dt = JSON.parse(game.messages._source[msg_num].roll)
ndp = game.ffg.RollFFG.fromData(dt)

dice_and_results = []

ndp.terms.forEach( (element) => {
  if (element.constructor.name != "String") {
    d_name = element.constructor.name;
    element.results.forEach( (r) => {
      // console.log(r);
      net_success = r.ffg.success - r.ffg.failure;
      // console.log(net_success)
      net_advantage = r.ffg.advantage - r.ffg.threat;
      // console.log(net_advantage)
      triumph = r.ffg.triumph;
      despair = 0 - r.ffg.despair;
      r_string = [net_success, net_advantage, triumph, despair].join();
      dice_and_results.push([d_name, r_string])
    })
  }
})



}



dice_and_results = [["ProficiencyDie","1,0,1,0"],["ProficiencyDie","1,1,0,0"],["AbilityDie","2,0,0,0"],["AbilityDie","0,2,0,0"],["ChallengeDie","-2,0,0,0"],["ChallengeDie","-1,0,0,-1"],["DifficultyDie","0,-1,0,0"],["DifficultyDie","0,0,0,0"],["BoostDie","0,0,0,0"],["BoostDie","1,1,0,0"],["SetbackDie","0,-1,0,0"],["SetbackDie","0,0,0,0"]]

// output from pretty js adjacency
b = JSON.parse('{"0,0,0,0": [[[0, 1, 0, 0], [0, 2, 0, 0], [1, 0, 0, 0], [1, 1, 0, 0]], [[0, 1, 0, 0], [0, 2, 0, 0], [1, 0, 0, 0], [1, 1, 0, 0]]], "0,1,0,0": [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 2, 0, 0], [1, 1, 0, 0]]], "1,0,0,0": [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 2, 0, 0], [1, 1, 0, 0]]], "1,1,0,0": [[[0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0], [0, 1, 0, 0]]], "0,2,0,0": [[[0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0], [0, 1, 0, 0]]]}')
a = JSON.parse('{"2,0,0,0": [[[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 0, 0]]], "1,0,0,0": [[[2, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]]], "0,1,0,0": [[[2, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]], [[0, 2, 0, 0], [1, 0, 0, 0], [1, 1, 0, 0]], [[0, 2, 0, 0], [1, 1, 0, 0], [0, 1, 0, 0]]], "1,1,0,0": [[[2, 0, 0, 0], [1, 0, 0, 0], [0, 1, 0, 0]]], "0,0,0,0": [[[0, 2, 0, 0], [1, 0, 0, 0], [0, 1, 0, 0]]], "0,2,0,0": [[[0, 0, 0, 0], [1, 0, 0, 0], [0, 1, 0, 0]]]}')
p = JSON.parse('{"1,0,1,0": [[[1, 0, 0, 0], [2, 0, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0], [0, 2, 0, 0]]], "1,0,0,0": [[[1, 0, 1, 0], [2, 0, 0, 0], [0, 2, 0, 0], [1, 1, 0, 0], [1, 1, 0, 0]], [[0, 2, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0], [2, 0, 0, 0], [0, 0, 0, 0]]], "2,0,0,0": [[[1, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0], [0, 2, 0, 0]], [[1, 0, 0, 0], [1, 1, 0, 0], [0, 2, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0]]], "0,1,0,0": [[[1, 0, 1, 0], [2, 0, 0, 0], [0, 2, 0, 0], [1, 0, 0, 0], [1, 1, 0, 0]]], "1,1,0,0": [[[1, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0], [0, 2, 0, 0], [2, 0, 0, 0]], [[1, 1, 0, 0], [1, 0, 0, 0], [2, 0, 0, 0], [0, 2, 0, 0], [0, 0, 0, 0]], [[2, 0, 0, 0], [0, 2, 0, 0], [1, 0, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0]]], "0,2,0,0": [[[1, 0, 1, 0], [1, 1, 0, 0], [2, 0, 0, 0], [1, 1, 0, 0], [1, 0, 0, 0]], [[1, 1, 0, 0], [0, 2, 0, 0], [0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0]]], "0,0,0,0": [[[1, 0, 0, 0], [0, 2, 0, 0], [1, 1, 0, 0], [1, 1, 0, 0], [2, 0, 0, 0]]]}')
s = JSON.parse('{"0,0,0,0": [[[-1, 0, 0, 0], [0, -1, 0, 0], [-1, 0, 0, 0], [0, -1, 0, 0]], [[-1, 0, 0, 0], [0, -1, 0, 0], [-1, 0, 0, 0], [0, -1, 0, 0]]], "-1,0,0,0": [[[0, 0, 0, 0], [0, -1, 0, 0], [0, 0, 0, 0], [0, -1, 0, 0]], [[0, 0, 0, 0], [0, -1, 0, 0], [0, 0, 0, 0], [0, -1, 0, 0]]], "0,-1,0,0": [[[0, 0, 0, 0], [-1, 0, 0, 0], [0, 0, 0, 0], [-1, 0, 0, 0]], [[0, 0, 0, 0], [-1, 0, 0, 0], [0, 0, 0, 0], [-1, 0, 0, 0]]]}')
d = JSON.parse('{"-2,0,0,0": [[[0, -1, 0, 0], [0, -1, 0, 0], [0, 0, 0, 0]]], "0,-1,0,0": [[[-2, 0, 0, 0], [-1, 0, 0, 0], [0, -2, 0, 0]], [[-2, 0, 0, 0], [-1, 0, 0, 0], [-1, -1, 0, 0]], [[-1, 0, 0, 0], [-1, -1, 0, 0], [0, -2, 0, 0]]], "0,0,0,0": [[[-2, 0, 0, 0], [0, -2, 0, 0], [-1, -1, 0, 0]]], "0,-2,0,0": [[[0, 0, 0, 0], [0, -1, 0, 0], [0, -1, 0, 0]]], "-1,0,0,0": [[[0, -1, 0, 0], [0, -1, 0, 0], [0, -1, 0, 0]]], "-1,-1,0,0": [[[0, 0, 0, 0], [0, -1, 0, 0], [0, -1, 0, 0]]]}')
c = JSON.parse('{"-1,0,0,-1": [[[-1, 0, 0, 0], [0, -1, 0, 0], [-2, 0, 0, 0], [-1, -1, 0, 0], [0, -2, 0, 0]]], "-1,0,0,0": [[[-1, 0, 0, -1], [0, -1, 0, 0], [-1, -1, 0, 0], [-2, 0, 0, 0], [0, -2, 0, 0]], [[0, 0, 0, 0], [0, -1, 0, 0], [-1, -1, 0, 0], [-2, 0, 0, 0], [0, -2, 0, 0]]], "0,-1,0,0": [[[-1, 0, 0, -1], [-1, 0, 0, 0], [-1, -1, 0, 0], [0, -2, 0, 0], [-2, 0, 0, 0]], [[0, 0, 0, 0], [-1, 0, 0, 0], [-1, -1, 0, 0], [0, -2, 0, 0], [-2, 0, 0, 0]]], "-2,0,0,0": [[[-1, 0, 0, -1], [0, -1, 0, 0], [0, -2, 0, 0], [-1, 0, 0, 0], [-1, -1, 0, 0]], [[0, 0, 0, 0], [0, -1, 0, 0], [0, -2, 0, 0], [-1, 0, 0, 0], [-1, -1, 0, 0]]], "-1,-1,0,0": [[[-1, 0, 0, -1], [-2, 0, 0, 0], [-1, 0, 0, 0], [0, -1, 0, 0], [0, -2, 0, 0]], [[0, 0, 0, 0], [-2, 0, 0, 0], [-1, 0, 0, 0], [0, -1, 0, 0], [0, -2, 0, 0]]], "0,-2,0,0": [[[-1, 0, 0, -1], [-1, -1, 0, 0], [0, -1, 0, 0], [-2, 0, 0, 0], [-1, 0, 0, 0]], [[0, 0, 0, 0], [-1, -1, 0, 0], [0, -1, 0, 0], [-2, 0, 0, 0], [-1, 0, 0, 0]]], "0,0,0,0": [[[-1, 0, 0, 0], [0, -1, 0, 0], [-2, 0, 0, 0], [-1, -1, 0, 0], [0, -2, 0, 0]]]}')

console.log(dice_and_results)










if (false) {
    ndp.toMessage()
}